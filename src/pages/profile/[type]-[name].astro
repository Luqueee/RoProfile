---
import Layout from '../../layouts/Layout.astro';
import SearchUser from '@/components/forms/SearchUser.astro';
import Card from '@/components/Card.astro';
import '../../styles/globals.css';

import GetRobuxProfile from '../../components/statusprofile/getrobuxprofile.jsx';
import { Image } from 'astro:assets';

const nombre = Astro.params.name;
const typesearch = Astro.params.type;
const origin = Astro.url.origin;

//console.log(nombre);
//console.log(origin);
//console.log(typesearch);

if (Astro.request.method === 'POST') {
    try {
        const datapost = await Astro.request.formData();
        const name = datapost.get('profilename');
        const type = datapost.get('profileOption');
        //console.log(name);
        return Astro.redirect(`/profile/${type}-${name}`);
        // Do something with the data
    } catch (error) {
        if (error instanceof Error) {
            console.error(error.message);
        }
    }
}

const result =
    typesearch == 'name'
        ? await fetch(`${origin}/api/getplayersid/${nombre}`)
        : await fetch(`${origin}/api/getplayername/${nombre}`);

let data = await result.json();

try {
    data = await data.data[0];
} catch {
    data = data;
}

if (typesearch == 'id') {
    const namevalue = await fetch(`${origin}/api/getplayersid/${data.name}`);
    let dataname = await namevalue.json();
    //console.log(dataname);
    data = await dataname.data[0];
}

//console.log(data);
//console.log(data);

//const assetsinforeq = await fetch(`${origin}/api/getassetsinfo/${data.id}`);
//const assetsinfo = await assetsinforeq.json();

const datauserresult = await fetch(`${origin}/api/getplayer/${data.id}`);
const datauser = await datauserresult.json();

const profileavatarreq = await fetch(`${origin}/api/getimageplayer/${data.id}`);
const profileavatar = await profileavatarreq.json();

const statusprofilereq = await fetch(`${origin}/api/statusprofile/${data.id}`);
const statusprofile = await statusprofilereq.json();
//console.log(statusprofile);

let imageavatar: any = [];
for (let key of Object.keys(profileavatar.thumbnails)) {
    let value = imageavatar[key];
    //console.log(`Key: ${key}, Value: ${value}`);
    imageavatar.push(profileavatar.thumbnails[key].url);
}

const assets = datauser.assets;
console.log(assets);
//const images = assetsinfo['collectibles'];

const Assetsimages = await Promise.all(
    assets.map(async (value: any) => {
        const response = await fetch(`${origin}/api/getimage/${value.id}`);
        const result = await response.json();
        //console.log(result.data);
        return result;
    })
);

function getImageAsset(id: any) {
    for (let i = 0; i < Assetsimages.length; i++) {
        if (Assetsimages[i].data[0].targetId === id.id) {
            return Assetsimages[i].data[0].imageUrl;
        }
    }
    return null;
}
---

<Layout title="Welcome to Astro.">
    <Card>
        <SearchUser />
    </Card>
    <div class="min-w-[90%]">
        <div
            class="bg-white rounded-lg shadow-lg text-black flex relative basis-full">
            <section
                class="min-w-[50%] px-4 py-8 rounded-tl-lg rounded-bl-lg"
                style='background: rgb(210,213,217); background: -moz-linear-gradient(90deg, rgba(210,213,217,1) 60%, rgba(255,255,255,1) 84%); background: -webkit-linear-gradient(90deg, rgba(210,213,217,1) 40%, rgba(255,255,255,1) 84%); background: linear-gradient(90deg, rgba(210,213,217,1) 40%, rgba(255,255,255,1) 84%); filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#d2d5d9",endColorstr="#ffffff",GradientType=1);'>
                <h3
                    class="lg:text-6xl font-semibold text-gray-700 leading-relaxed mt-4 mb-6">
                    {data.name}
                </h3>
                <GetRobuxProfile client:load origin={origin} id={data.id} />
            </section>
            <section class="min-w-[20%] flex-grow">
                <Image
                    src={imageavatar[0]}
                    width={200}
                    height={200}
                    draggable="false"
                    alt="Profile Avatar"
                    class="w-full sm:w-[50%] md:w-[50%] rounded-md flex justify-end ml-auto"
                />
            </section>
        </div>
        <div
            class="min-w-full grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 rounded-md mt-4">
            {
                assets.map((value: any) => (
                    <div class="bg-white bg-opacity-80 dark:bg-opacity-90 rounded-lg shadow-md dark:text-gray-800 text-white flex flex-col items-center justify-center">
                        <a
                            href={`https://www.roblox.com/catalog/${value.id}`}
                            class="h-[80%] flex justify-center items-center p-6 w-full"
                            target="_blank">
                            <Image
                                src={getImageAsset(value)}
                                alt={value.name}
                                width={400}
                                height={400}
                                draggable="false"
                                loading="lazy"
                                class="rounded-md m-auto object-cover"
                            />
                        </a>
                        <a
                            href={`https://www.roblox.com/catalog/${value.id}`}
                            target="_blank"
                            class="text-2xl text-gray-800 leading-relaxed my-6 text-center font-semibold no-underline hover:font-bold hover:text-gray-800 transition-all duration-500">
                            {value.name}
                        </a>
                    </div>
                ))
            }
        </div>
    </div>
</Layout>

<style></style>
