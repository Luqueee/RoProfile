---
import Layout from '../../layouts/Layout.astro';
import Card from '../../components/Card.astro';
import '../../styles/globals.css';

import GetRobuxProfile from '../../components/statusprofile/getrobuxprofile.jsx';

const nombre = Astro.params.name;
const typesearch = Astro.params.type;
const origin = Astro.url.origin;

//console.log(nombre);
//console.log(origin);
//console.log(typesearch);

if (Astro.request.method === 'POST') {
    try {
        const datapost = await Astro.request.formData();
        const name = datapost.get('profilename');
        const type = datapost.get('profileOption');
        //console.log(name);
        return Astro.redirect(`/profile/${type}-${name}`);
        // Do something with the data
    } catch (error) {
        if (error instanceof Error) {
            console.error(error.message);
        }
    }
}

const result =
    typesearch == 'name'
        ? await fetch(`${origin}/api/getplayersid/${nombre}`)
        : await fetch(`${origin}/api/getplayername/${nombre}`);

let data = await result.json();

try {
    data = await data.data[0];
} catch {
    data = data;
}

if (typesearch == 'id') {
    const namevalue = await fetch(`${origin}/api/getplayersid/${data.name}`);
    let dataname = await namevalue.json();
    //console.log(dataname);
    data = await dataname.data[0];
}

//console.log(data);
//console.log(data);

//const assetsinforeq = await fetch(`${origin}/api/getassetsinfo/${data.id}`);
//const assetsinfo = await assetsinforeq.json();

const datauserresult = await fetch(`${origin}/api/getplayer/${data.id}`);
const datauser = await datauserresult.json();

const profileavatarreq = await fetch(`${origin}/api/getimageplayer/${data.id}`);
const profileavatar = await profileavatarreq.json();

const statusprofilereq = await fetch(`${origin}/api/statusprofile/${data.id}`);
const statusprofile = await statusprofilereq.json();
//console.log(statusprofile);

let imageavatar: any = [];
for (let key of Object.keys(profileavatar.thumbnails)) {
    let value = imageavatar[key];
    //console.log(`Key: ${key}, Value: ${value}`);
    imageavatar.push(profileavatar.thumbnails[key].url);
}

const assets = datauser.assets;
console.log(assets);
//const images = assetsinfo['collectibles'];

const Assetsimages = await Promise.all(
    assets.map(async (value: any) => {
        const response = await fetch(`${origin}/api/getimage/${value.id}`);
        const result = await response.json();
        //console.log(result.data);
        return result;
    })
);

function getImageAsset(id: any) {
    for (let i = 0; i < Assetsimages.length; i++) {
        if (Assetsimages[i].data[0].targetId === id.id) {
            return Assetsimages[i].data[0].imageUrl;
        }
    }
    return null;
}
---

<Layout title="Welcome to Astro.">
    <div class="min-w-full p-4 rounded-md flex justify-center">
        <form id="searchplayer" method="POST" class="w-[100%] flex h-8 gap-6">
            <select
                id="profileOption"
                name="profileOption"
                class="w-[8%] px-4 py-2 border rounded-lg h-10 bg-slate-800 transition-all duration-500 text-white"
                required>
                <option value="name">Por nombre</option>
                <option value="id">Por id</option>

                <!-- Add more options as needed -->
            </select>

            <input
                type="text"
                id="profilename"
                name="profilename"
                class="w-[50%] focus:w-[80%] px-4 py-2 border rounded-lg h-10 bg-slate-800 focus:bg-white transition-all duration-500 text-white focus:text-black"
                placeholder="Perfil"
                required
            />

            <button
                type="submit"
                class="flex-grow transition-all duration-500 bg-blue-600 text-white font-medium py-2 px-4 rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-600 h-10"
                >Buscar</button
            >
        </form>
    </div>
    <div class="min-w-[90%] flex gap-4 flex-wrap p-4 rounded-md">
        <div
            class="dark:bg-white bg-[#020817] rounded-lg shadow-lg text-black flex relative basis-full">
            <section
                class="min-w-[50%] px-4 py-8 rounded-tl-lg rounded-bl-lg"
                style='background: rgb(210,213,217); background: -moz-linear-gradient(90deg, rgba(210,213,217,1) 60%, rgba(255,255,255,1) 84%); background: -webkit-linear-gradient(90deg, rgba(210,213,217,1) 40%, rgba(255,255,255,1) 84%); background: linear-gradient(90deg, rgba(210,213,217,1) 40%, rgba(255,255,255,1) 84%); filter: progid:DXImageTransform.Microsoft.gradient(startColorstr="#d2d5d9",endColorstr="#ffffff",GradientType=1);'>
                <h3
                    class="lg:text-6xl font-semibold text-gray-700 leading-relaxed mt-4 mb-6">
                    {data.name}
                </h3>
                <GetRobuxProfile client:load origin={origin} id={data.id} />
            </section>
            <section class="min-w-[20%] flex-grow">
                <img
                    src={imageavatar[0]}
                    class="w-[50%] rounded-md flex justify-end ml-auto"
                />
            </section>
        </div>
        {
            assets.map((value: any) => (
                <div class="dark:bg-[rgb(210,213,217)] px-4 py-4 rounded-lg dark:text-gray-800 text-white flex flex-col align-middle justify-center basis-1/8 ">
                    <img
                        src={getImageAsset(value)}
                        class=" rounded-md h-[80%]"
                    />
                    <a
                        href={`https://www.roblox.com/catalog/${value.id}`}
                        target="_blank"
                        class="text-2xl dark:text-gray-800 text-white leading-relaxed my-6 text-center font-semibold no-underline hover:font-bold dark:hover:text-gray-800 transition-all duration-500">
                        {value.name}
                    </a>
                </div>
            ))
        }
    </div>
</Layout>

<style></style>
